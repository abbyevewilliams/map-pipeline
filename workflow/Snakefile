# =================================================================================================
#     Setup
# =================================================================================================

# Packages
import pandas as pd
import os
import glob

# Point to config file
configfile: "config/config.yaml"

# Read in sample names
with open(config["samples"]) as f:
    SAMPLES = [line.strip() for line in f]

# Function for finding lanes
def get_lanes(sample):
    """Find all unique lane identifiers for a given sample, preserving sequencing run information."""
    lane_files = glob.glob(f"{config['clean_reads_dir']}/{sample}/{sample}_*_1.fq.gz")
    lanes = sorted(set(f.rsplit("_1.fq.gz", 1)[0].split(f"{sample}_")[-1] for f in lane_files))
    return lanes

# =================================================================================================
#     Default "All" Target Rule
# =================================================================================================

rule all:
    input:
        # Expand mapped bams for each sample and its lanes
        [f"contemporary-results/sorted/{sample}--{lane}.bam" for sample in SAMPLES for lane in get_lanes(sample)] +
        # Expand indexed bams
        [f"contemporary-results/sorted/{sample}--{lane}.bam.bai" for sample in SAMPLES for lane in get_lanes(sample)] +
        # Expand other outputs
        [f"contemporary-results/dedup/{sample}.bam" for sample in SAMPLES] +
        [f"contemporary-results/dedup/{sample}.bam.bai" for sample in SAMPLES] +
        [f"contemporary-results/dedup/{sample}.stats" for sample in SAMPLES] +
        [f"contemporary-results/dedup/{sample}.depth" for sample in SAMPLES] +
        ["contemporary-results/mapping_summary.txt"] + 
        ["contemporary-results/avg_depth.txt"]

localrules:
    all

# =================================================================================================
#     Rule Modules
# =================================================================================================

include: "rules/map.smk"